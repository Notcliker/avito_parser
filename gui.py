"""
üîß –ù–∞–∑–≤–∞–Ω–∏–µ: Avito Parser 
üìÅ –§–∞–π–ª: Gui.py
üë§ –ê–≤—Ç–æ—Ä: Metiso4kas
üìÖ –ò—é–Ω—å 2025
üíº –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–∞—Ä—Å–∏–Ω–≥ Avito 
üõ° –õ–∏—Ü–µ–Ω–∑–∏—è: MIT

## üìú –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

- üõ†Ô∏è –î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —É—á–µ–±–Ω—ã—Ö –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.
- üè¢ –û–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º Avito –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Å–∞–π—Ç–∞ [Avito.ru](https://www.avito.ru).
- ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç—å **—É—Å–ª–æ–≤–∏—è–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è Avito.
- üë§ –ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
- ‚ùå –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –º–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã."
"""

import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import os
import threading
from unidecode import unidecode
from parser import run_parser
from transliterate import translit

# üåç –°–ª–æ–≤–∞—Ä—å slug ‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
CITY_NAMES = {
    "moskva": "–ú–æ—Å–∫–≤–∞",
    "sankt-peterburg": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "novosibirsk": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "ekaterinburg": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "kazan": "–ö–∞–∑–∞–Ω—å",
    "rostov-na-donu": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
    "nizhniy_novgorod": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    "chelyabinsk": "–ß–µ–ª—è–±–∏–Ω—Å–∫",
    "samara": "–°–∞–º–∞—Ä–∞",
    "ufa": "–£—Ñ–∞",
    "krasnoyarsk": "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
    "perm": "–ü–µ—Ä–º—å",
    "voronezh": "–í–æ—Ä–æ–Ω–µ–∂",
    "volgograd": "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "omsk": "–û–º—Å–∫",
    "podolsk": "–ü–æ–¥–æ–ª—å—Å–∫",
    "rossiya": "–†–æ—Å—Å–∏—è"
}

def slug_to_city(slug):
    slug = slug.lower()
    if slug in CITY_NAMES:
        return CITY_NAMES[slug]
    return translit(slug.replace("-", " ").title(), 'ru')

# üé® –¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏
BG_COLOR = "#f0f4f8"
BTN_COLOR = "#4a90e2"
BTN_TEXT = "#ffffff"
FONT_MAIN = ("Segoe UI", 11)
FONT_BTN = ("Segoe UI", 10, "bold")

root = tk.Tk()
root.title("Avito –ü–∞—Ä—Å–µ—Ä ‚Äî by Metiso4kas")
root.geometry("950x650")
root.configure(bg=BG_COLOR)
root.resizable(False, False)

# === –§—Ä–µ–π–º –≤–≤–æ–¥–∞
frm_inputs = tk.Frame(root, bg=BG_COLOR)
frm_inputs.pack(pady=15)

tk.Label(frm_inputs, text="üîç –ó–∞–ø—Ä–æ—Å:", font=FONT_MAIN, bg=BG_COLOR).grid(row=0, column=0, sticky="e", padx=5)
entry = tk.Entry(frm_inputs, font=FONT_MAIN, width=35)
entry.grid(row=0, column=1, padx=5)
entry.insert(0, "–≥–∏—Ä—è")

# === –ö–Ω–æ–ø–∫–∏
frm_buttons = tk.Frame(root, bg=BG_COLOR)
frm_buttons.pack(pady=10)

btn = tk.Button(frm_buttons, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", font=FONT_BTN, bg=BTN_COLOR, fg=BTN_TEXT, width=22, command=lambda: threading.Thread(target=start_parsing).start())
btn.grid(row=0, column=0, padx=10)

btn_copy = tk.Button(frm_buttons, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", font=FONT_BTN, bg=BTN_COLOR, fg=BTN_TEXT, width=22, command=lambda: copy_selected_link())
btn_copy.grid(row=0, column=1, padx=10)

# === –¢–∞–±–ª–∏—Ü–∞
style = ttk.Style()
style.configure("Treeview.Heading", font=("Segoe UI", 10, "bold"))
style.configure("Treeview", font=("Segoe UI", 9), rowheight=26, background="#ffffff", fieldbackground="#ffffff")
style.map("Treeview", background=[("selected", "#d0e8ff")])

tree = ttk.Treeview(root, columns=("–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ì–æ—Ä–æ–¥", "–°—Å—ã–ª–∫–∞"), show="headings", height=17)
tree.pack(fill="both", expand=True, padx=20, pady=10)

for col in tree["columns"]:
    tree.heading(col, text=col)
    tree.column(col, anchor="w", width=220 if col != "–°—Å—ã–ª–∫–∞" else 300)

# === –°—Ç–∞—Ç—É—Å
status = tk.StringVar()
status.set("‚åõ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
tk.Label(root, textvariable=status, font=("Segoe UI", 9), bg=BG_COLOR).pack(pady=5)


# === –§—É–Ω–∫—Ü–∏–∏ ===

def load_and_display_csv():
    if not os.path.exists("data/results.csv"):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª data/results.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    df = pd.read_csv("data/results.csv")

    for row in tree.get_children():
        tree.delete(row)

    df["–¶–µ–Ω–∞ (—á–∏—Å–ª–æ)"] = df["–¶–µ–Ω–∞"].str.replace("‚ÇΩ", "").str.replace(" ", "").str.extract(r"(\d+)", expand=False).astype(float)
    df = df.sort_values(by="–¶–µ–Ω–∞ (—á–∏—Å–ª–æ)", ascending=True)

    df["–ì–æ—Ä–æ–¥"] = df["–ì–æ—Ä–æ–¥"].apply(slug_to_city)

    for _, row in df.iterrows():
        tree.insert("", "end", values=(row["–ù–∞–∑–≤–∞–Ω–∏–µ"], row["–¶–µ–Ω–∞"], row["–ì–æ—Ä–æ–¥"], row["–°—Å—ã–ª–∫–∞"]))


def copy_selected_link():
    selected = tree.focus()
    if selected:
        link = tree.item(selected)["values"][-1]
        root.clipboard_clear()
        root.clipboard_append(link)
        root.update()
        messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n{link}")


def start_parsing():
    query = entry.get().strip()
    if not query:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return

    city_slug = "rossiya"
    btn["state"] = "disabled"
    status.set("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
    root.update()

    try:
        run_parser(query, city_slug)
        load_and_display_csv()
        messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
    finally:
        btn["state"] = "normal"
        status.set("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ")


root.mainloop()
